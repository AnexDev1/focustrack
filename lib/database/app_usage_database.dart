import 'package:drift/drift.dart';

part 'app_usage_database.g.dart'; // generated by drift_dev

// This will generate a table called "app_usage_sessions"
class AppUsageSessions extends Table {
  IntColumn get id => integer().autoIncrement()();
  TextColumn get appName => text()();
  TextColumn get windowTitle => text().nullable()();
  DateTimeColumn get startTime => dateTime()();
  DateTimeColumn get endTime => dateTime().nullable()();
  IntColumn get durationMs => integer()(); // duration in milliseconds
  IntColumn get idleTimeMs =>
      integer().withDefault(const Constant(0))(); // idle time in milliseconds
  BoolColumn get isActive => boolean().withDefault(
    const Constant(false),
  )(); // to track current active session
}

@DriftDatabase(tables: [AppUsageSessions])
class AppUsageDatabase extends _$AppUsageDatabase {
  AppUsageDatabase(super.e);

  @override
  int get schemaVersion => 1;

  // Insert a new session
  Future<int> insertSession(AppUsageSessionsCompanion session) {
    return into(appUsageSessions).insert(session);
  }

  // Update a session
  Future<bool> updateSession(AppUsageSession session) {
    return update(appUsageSessions).replace(session);
  }

  // Get all sessions
  Future<List<AppUsageSession>> getAllSessions() {
    return select(appUsageSessions).get();
  }

  // Get sessions for a specific app
  Future<List<AppUsageSession>> getSessionsForApp(String appName) {
    return (select(
      appUsageSessions,
    )..where((tbl) => tbl.appName.equals(appName))).get();
  }

  // Get sessions for a date range
  Future<List<AppUsageSession>> getSessionsInDateRange(
    DateTime start,
    DateTime end,
  ) {
    return (select(
      appUsageSessions,
    )..where((tbl) => tbl.startTime.isBetweenValues(start, end))).get();
  }

  // Get active session
  Future<AppUsageSession?> getActiveSession() {
    return (select(appUsageSessions)
          ..where((tbl) => tbl.isActive.equals(true))
          ..orderBy([(tbl) => OrderingTerm.desc(tbl.startTime)]))
        .getSingleOrNull();
  }

  // Delete old sessions (cleanup)
  Future<int> deleteSessionsOlderThan(DateTime date) {
    return (delete(
      appUsageSessions,
    )..where((tbl) => tbl.startTime.isSmallerThanValue(date))).go();
  }

  // Delete all sessions
  Future<int> clearAllSessions() {
    return delete(appUsageSessions).go();
  }
}
